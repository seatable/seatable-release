---
services:
  caddy:
    ports:
      - ${N8N_PORT:-6231}:${N8N_PORT:-6231}

  n8n-postgres:
    image: ${N8N_POSTGRES_IMAGE:-postgres:11}
    restart: unless-stopped
    container_name: n8n-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Variable is not set or empty}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER:-non_root_user}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD:?Variable is not set or empty}
    volumes:
      - "/opt/n8n-postgres:/var/lib/postgresql/data"
      - "./n8n-init-data.sh:/docker-entrypoint-initdb.d/init-data.sh"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER:-root} -d ${POSTGRES_DB:-n8n}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - backend-n8n-net

  n8n:
    image: ${N8N_IMAGE:-docker.n8n.io/n8nio/n8n:1.110.1}
    restart: unless-stopped
    container_name: n8n
    environment:
      - N8N_HOST=${N8N_HOST:-n8n}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - NODE_ENV=production
      - WEBHOOK_URL=${SEATABLE_SERVER_PROTOCOL:-https}://${SEATABLE_SERVER_HOSTNAME}:${N8N_PORT:-6231}/
      - GENERIC_TIMEZONE=${TIME_ZONE}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:?Variable is not set or empty, might be already set in n8n config file}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=n8n-postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER:-non_root_user}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=true 
      - N8N_RUNNERS_ENABLED=true
      - N8N_TRUST_PROXY=true
      - N8N_PROXY_HOPS=1
    volumes:
      - "/opt/n8n:/home/node/.n8n"
    labels:
      caddy: ${SEATABLE_SERVER_HOSTNAME}:${N8N_PORT:-6231}
      caddy.reverse_proxy: "{{upstreams 5678}}"
    depends_on:
      n8n-postgres:
        condition: service_healthy
      n8n-init:
        condition: service_completed_successfully
    networks:
      - frontend-net
      - backend-n8n-net

  n8n-init:
    image: busybox
    container_name: n8n-init
    command: ['sh', '-c', 'chown -R 1000:1000 /home/node/.n8n']
    volumes:
      - /opt/n8n:/home/node/.n8n

networks:
  frontend-net:
    name: frontend-net
  backend-n8n-net:
    name: backend-n8n-net
